name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.3'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod tidy

    - name: Run unit tests
      run: go test -v -race ./internal/...

    - name: Run integration tests
      run: go test -v ./pkg/...

    - name: Generate test coverage
      run: go test -coverprofile=coverage.out ./internal/...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.3'

    - name: Build for Linux
      run: make build-linux

    - name: Build for Windows
      run: make build-windows

    - name: Build for macOS
      run: make build-darwin

    - name: Build for ARM
      run: make build-arm

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: bin/
        retention-days: 30

  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.3'

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

    - name: Run go vet
      run: go vet ./...

    - name: Run staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest && staticcheck ./...

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run gosec security scanner
      uses: securego/gosec@master
      with:
        args: -exclude=G104 ./...

    - name: Run dependency vulnerability check
      run: go list -m all | nancy sleuth

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, lint, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: binaries

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add deployment commands here
        # This could include Docker builds, cloud deployments, etc.

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, build, lint, security]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}